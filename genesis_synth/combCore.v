//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/j/j/o/jjose3/combCore/combCore/rtl/combCore.vp
//  Source template: combCore
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// combCore.vp
// bitWidth (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
module combCore (
input logic [31:0] instr,
input logic [31:0] pc,
input logic [31:0] src0,
input logic [31:0] src1,
input logic [31:0] memRdData,
output logic [31:0] memRdAddr,
output logic memRdEn,
output logic [31:0] memWrData ,
output logic [31:0] memWrAddr,
output logic memWrEn ,
output logic [31:0] dst0,
output logic [31:0] pcNxt
);

logic [5:0] op; //opcode 
logic [4:0] rs; //register s r-type
logic [4:0] rt; // register t r-type
logic [4:0] rd; // register d r-type
logic [4:0] shmt; //shift amount r-type
logic [5:0] fn; //function - r-type
logic [5:0] mfn; //function created for I-type
logic [5:0] muxfunc; //muxed function
logic [15:0] imm; //immediate for i-type
logic [31:0] simm; //sign ext immediate for i-type
logic [25:0] offs; //offset for j-type

logic [31:0] pcplus4;
logic [31:0] pcplusimm;
logic [31:0] jmpaddr;
logic [31:0] alu_o, alu_a, alu_b;

logic [3:0] aluctl;  
logic [1:0] aluop;  
logic bne, bgtz, beq, zero, gtz, branch, jmp, jmpreg, alusrc, aluimm, memtoreg, regdst; 

assign op = instr[31:26];
assign rs = instr[25:21];
assign rt = instr[20:16];
assign rd = instr[15:11];
assign shmt = instr[10:6];
assign fn = instr[5:0];
assign imm = instr[15:0];
assign simm = {{16{instr[15]}}, instr[15:0]};
assign offs = instr[25:0];

assign pcplus4 = pc + 32'd4;
assign pcplusimm = pcplus4 + {simm[29:0], 2'b0};
assign jmpaddr = {pcplus4[31:28], offs[25:0], 2'b0};

assign branch = (bgtz && gtz) || (bne && ~zero) || (beq && zero);

always_comb begin
	unique case({jmp, jmpreg, branch})
		3'b001:	   pcNxt = pcplusimm;
		3'b010:    pcNxt = src0;
		3'b100:    pcNxt = jmpaddr; 
		default:   pcNxt = pcplus4;
	endcase
end

assign alu_b = alusrc ? simm : src1;
assign alu_a = src0;
assign muxfunc = aluimm ? mfn : fn;

assign memWrAddr = alu_o;
assign memRdAddr = alu_o;
assign memWrData = src1;

assign dst0 = memtoreg ? memRdData : alu_o;

// Instantiations

ctl  CPU_CTL(.op(op), .func(fn), .mfunc(mfn), .beq(beq), .bne(bne), .bgtz(bgtz), .aluop(aluop), .aluimm(aluimm), .memrden(memRdEn), .memwren(memWrEn), .memtoreg(memtoreg), .regdst(regdst), .regwren(regWrEn), .alusrc(alusrc), .jmpreg(jmpreg), .jmp(jmp));

aluctl  ALU_CTL(.func(muxfunc), .aluop(aluop), .aluctl(aluctl));

alu  ALU(.ctl(aluctl), .a(alu_a), .b(alu_b), .shmt(shmt), .out(alu_o), .gtz(gtz), .zero(zero));
endmodule: combCore
